import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import Normalize
import matplotlib.dates as mdates

WINDOW = 252  # ~1 an ouvré

# -- indices datés & triés
df_IT_10Y.index   = pd.to_datetime(df_IT_10Y.index)
df_Swap_10Y.index = pd.to_datetime(df_Swap_10Y.index)
df_IT_10Y = df_IT_10Y.sort_index()
df_Swap_10Y = df_Swap_10Y.sort_index()

# -- vols 1Y (sur colonnes bps) CALCULÉS SÉPARÉMENT
df_IT_10Y['IT_10Y_vol_bps_1Y']     = pd.to_numeric(df_IT_10Y['IT_10Y_bps'],   errors='coerce').rolling(WINDOW, min_periods=WINDOW).std()
df_Swap_10Y['Swap_10Y_vol_bps_1Y'] = pd.to_numeric(df_Swap_10Y['Swap_10Y_bps'], errors='coerce').rolling(WINDOW, min_periods=WINDOW).std()

# -- fusion (inner) puis dropna net
df = df_IT_10Y[['IT_10Y','IT_10Y_bps','IT_10Y_vol_bps_1Y']].join(
        df_Swap_10Y[['Swap_10Y','Swap_10Y_bps','Swap_10Y_vol_bps_1Y']],
        how='inner'
     )
df = df.dropna(subset=['IT_10Y','IT_10Y_bps','IT_10Y_vol_bps_1Y',
                       'Swap_10Y','Swap_10Y_bps','Swap_10Y_vol_bps_1Y'])

# -- RATIOS (fix): niveaux en BPS
df['Level_Ratio'] = df['IT_10Y_bps'] / df['Swap_10Y_bps']          # ✅ ratio des niveaux, en bps
df['Vol_Ratio']   = df['IT_10Y_vol_bps_1Y'] / df['Swap_10Y_vol_bps_1Y']  # ratio des vols

# (optionnel: pousser les ratios dans df_IT_10Y)
df_IT_10Y['IT_to_Swap_Level_Ratio'] = df['Level_Ratio'].reindex(df_IT_10Y.index)
df_IT_10Y['IT_to_Swap_Vol_Ratio']   = df['Vol_Ratio'].reindex(df_IT_10Y.index)

# ----------------- SCATTERS (colorbar à l'extérieur) -----------------
years = df.index.year
norm = Normalize(vmin=years.min(), vmax=years.max())
cmap = cm.get_cmap('coolwarm')

fig, axes = plt.subplots(1, 2, figsize=(16, 6))
fig.subplots_adjust(right=0.88)  # de la place pour la colorbar externe

axes[0].scatter(df['IT_10Y'], df['IT_10Y_vol_bps_1Y'],
                c=years, cmap=cmap, norm=norm, s=16)
axes[0].set_xlabel('IT 10Y (%)'); axes[0].set_ylabel('Vol 1Y (bps)')
axes[0].set_title('IT 10Y: vol(1Y) vs niveau'); axes[0].grid(True)

axes[1].scatter(df['Swap_10Y'], df['Swap_10Y_vol_bps_1Y'],
                c=years, cmap=cmap, norm=norm, s=16)
axes[1].set_xlabel('Swap 10Y (%)'); axes[1].set_ylabel('Vol 1Y (bps)')
axes[1].set_title('Swap 10Y: vol(1Y) vs niveau'); axes[1].grid(True)

sm = cm.ScalarMappable(norm=norm, cmap=cmap); sm.set_array([])
cbar_ax = fig.add_axes([0.90, 0.15, 0.02, 0.70])  # ext.
fig.colorbar(sm, cax=cbar_ax, orientation='vertical', label='Year')
plt.show()

# ----------------- COURBES VOL 1Y -----------------
plt.figure(figsize=(10,5))
plt.plot(df.index, df['IT_10Y_vol_bps_1Y'],   label='IT 10Y vol 1Y (bps)')
plt.plot(df.index, df['Swap_10Y_vol_bps_1Y'], label='Swap 10Y vol 1Y (bps)')
ax = plt.gca()
ax.xaxis.set_major_locator(mdates.YearLocator()); ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
plt.title('Évolution des volat’ (1Y rolling std)'); plt.ylabel('bps'); plt.legend(); plt.grid(True, alpha=0.3)
plt.tight_layout(); plt.show()

# ----------------- COURBES RATIOS -----------------
plt.figure(figsize=(10,5))
plt.plot(df.index, df['Vol_Ratio'],   label='Vol IT / Vol Swap')
plt.plot(df.index, df['Level_Ratio'], label='Niveau IT / Niveau Swap (bps)')
ax = plt.gca()
ax.xaxis.set_major_locator(mdates.YearLocator()); ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
plt.axhline(1.0, linestyle='--', linewidth=1, alpha=0.6)
plt.title('Ratios (vol & niveau)'); plt.ylabel('ratio'); plt.legend(); plt.grid(True, alpha=0.3)
plt.tight_layout(); plt.show()

# ----------------- NOUVEAUX PLOTS DE CONTROLE -----------------
# 1) Italy 10Y en bps
plt.figure(figsize=(10,5))
plt.plot(df.index, df['IT_10Y_bps'])
ax = plt.gca()
ax.xaxis.set_major_locator(mdates.YearLocator()); ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
plt.title('IT 10Y — niveau (bps)'); plt.ylabel('bps'); plt.grid(True, alpha=0.3)
plt.tight_layout(); plt.show()

# 2) Swap 10Y en bps
plt.figure(figsize=(10,5))
plt.plot(df.index, df['Swap_10Y_bps'])
ax = plt.gca()
ax.xaxis.set_major_locator(mdates.YearLocator()); ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
plt.title('Swap 10Y — niveau (bps)'); plt.ylabel('bps'); plt.grid(True, alpha=0.3)
plt.tight_layout(); plt.show()





#test

# --- diff en bps + scatter Vol_Ratio vs diff_bps (style heatmap année) ---

# 1) nouvelle colonne: écart de niveaux en bps
df['diff_bps'] = df['IT_10Y_bps'] - df['Swap_10Y_bps']

# 2) subset propre pour le plot
to_plot = df.dropna(subset=['diff_bps', 'Vol_Ratio'])

# 3) couleurs = année + colorbar externe
years = to_plot.index.year
from matplotlib.colors import Normalize
import matplotlib.cm as cm
norm = Normalize(vmin=years.min(), vmax=years.max())
cmap = cm.get_cmap('coolwarm')

fig, ax = plt.subplots(figsize=(8, 6))
fig.subplots_adjust(right=0.88)  # place à droite pour la colorbar

sc = ax.scatter(to_plot['diff_bps'], to_plot['Vol_Ratio'],
                c=years, cmap=cmap, norm=norm, s=16)

ax.set_xlabel('Diff niveau (IT 10Y - Swap 10Y) [bps]')
ax.set_ylabel('Vol Ratio (IT vol 1Y / Swap vol 1Y)')
ax.set_title('Vol Ratio vs Diff de niveau (bps)')
ax.grid(True)

# colorbar à l’extérieur (comme tes autres graphs)
sm = cm.ScalarMappable(norm=norm, cmap=cmap); sm.set_array([])
cbar_ax = fig.add_axes([0.90, 0.15, 0.02, 0.70])  # [left, bottom, width, height]
fig.colorbar(sm, cax=cbar_ax, orientation='vertical', label='Year')

plt.show()



#Test 2

# --- diff_vol_bps vs diff_bps ---

# 1) nouvelle colonne: diff de vol en bps
df['diff_vol_bps'] = df['IT_10Y_vol_bps_1Y'] - df['Swap_10Y_vol_bps_1Y']

# 2) subset propre
to_plot_vol = df.dropna(subset=['diff_bps', 'diff_vol_bps'])

# 3) couleurs = année + colorbar externe
years = to_plot_vol.index.year
norm = Normalize(vmin=years.min(), vmax=years.max())
cmap = cm.get_cmap('coolwarm')

fig, ax = plt.subplots(figsize=(8, 6))
fig.subplots_adjust(right=0.88)  # place pour colorbar

sc = ax.scatter(to_plot_vol['diff_bps'], to_plot_vol['diff_vol_bps'],
                c=years, cmap=cmap, norm=norm, s=16)

ax.set_xlabel('Diff niveau (IT 10Y - Swap 10Y) [bps]')
ax.set_ylabel('Diff vol (IT vol 1Y - Swap vol 1Y) [bps]')
ax.set_title('Diff vol bps vs Diff niveau bps')
ax.grid(True)

# colorbar externe
sm = cm.ScalarMappable(norm=norm, cmap=cmap); sm.set_array([])
cbar_ax = fig.add_axes([0.90, 0.15, 0.02, 0.70])
fig.colorbar(sm, cax=cbar_ax, orientation='vertical', label='Year')

plt.show()



# Partie Regression:

# =========================================
# Rolling regressions + heatmaps de betas
# =========================================
import numpy as np
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import Normalize

# -- si pas déjà fait
if 'diff_bps' not in df.columns:
    df['diff_bps'] = df['IT_10Y_bps'] - df['Swap_10Y_bps']

# --------- Paramètres ----------
ROLLING_WINDOW = 126  # ~6 mois ouvrés
ADD_CONST = True      # ajout constante

# --------- Helper: rolling OLS ---------
def rolling_ols(df_in, y_col, x_cols, window=126, add_const=True, prefix=""):
    y = pd.to_numeric(df_in[y_col], errors='coerce')
    X = df_in[x_cols].apply(pd.to_numeric, errors='coerce')
    data = pd.concat([y, X], axis=1).dropna()
    if len(data) < window:
        cols = [f"beta_{c}" for c in x_cols] + [f"t_{c}" for c in x_cols] + ["r2"]
        return pd.DataFrame(index=pd.DatetimeIndex([]), columns=cols, dtype=float)

    res_rows = []
    idx_rows = []
    for i in range(window-1, len(data)):
        win = data.iloc[i-window+1:i+1]
        y_win = win[y_col]
        X_win = win[x_cols]
        if add_const:
            X_win = sm.add_constant(X_win, has_constant='add')
        try:
            fit = sm.OLS(y_win, X_win, missing='drop').fit()
        except:
            continue

        betas = {}
        tstats = {}
        for c in x_cols:
            betas[f"beta_{c}"] = fit.params.get(c, np.nan)
            tstats[f"t_{c}"] = fit.tvalues.get(c, np.nan)
        row = {**betas, **tstats, "r2": fit.rsquared}
        res_rows.append(row)
        idx_rows.append(win.index[-1])

    out = pd.DataFrame(res_rows, index=pd.DatetimeIndex(idx_rows))
    if prefix:
        out = out.add_prefix(prefix)
    return out

# --------- Définition des régressions ----------
y_col = 'IT_10Y_vol_bps_1Y'
REGS = {
    "R1_volIT_vs_volSwap": {
        "x_cols": ['Swap_10Y_vol_bps_1Y'],
    },
    "R2_volIT_vs_volSwap_and_ITlevel": {
        "x_cols": ['Swap_10Y_vol_bps_1Y', 'IT_10Y'],
    },
    "R3_volIT_vs_diffbps_and_volSwap": {
        "x_cols": ['diff_bps', 'Swap_10Y_vol_bps_1Y'],
    },
    "R4_volIT_vs_volSwap_and_SwapLevel": {
        "x_cols": ['Swap_10Y_vol_bps_1Y', 'Swap_10Y'],
    },
}

# --------- Lancer les rolling OLS ----------
roll_results = {}
for name, spec in REGS.items():
    roll_results[name] = rolling_ols(df, y_col, spec["x_cols"],
                                     window=ROLLING_WINDOW, add_const=ADD_CONST,
                                     prefix=f"{name}.")

# --------- Fusionner tous les résultats + features ----------
features_for_plot = df[['diff_bps', 'Swap_10Y_vol_bps_1Y', 'Swap_10Y', 'Vol_Ratio', 'Level_Ratio']].copy()
res_all = features_for_plot.copy()
for name, res in roll_results.items():
    res_all = res_all.join(res, how='left')

# ---------- Helper: scatter “heatmap année” externe ----------
def scatter_beta_vs_feature(res_df, beta_col, feature_col, title, xlabel, ylabel="Beta", 
                            ratio_bounds=None):
    plot_df = res_df[[beta_col, feature_col]].dropna()
    if plot_df.empty:
        return
    if ratio_bounds and feature_col in ratio_bounds:
        lo, hi = ratio_bounds[feature_col]
        plot_df = plot_df[(plot_df[feature_col] > lo) & (plot_df[feature_col] < hi)]
        if plot_df.empty:
            return

    years = plot_df.index.year
    norm = Normalize(vmin=years.min(), vmax=years.max())
    cmap = cm.get_cmap('coolwarm')

    fig, ax = plt.subplots(figsize=(8, 6))
    fig.subplots_adjust(right=0.88)
    ax.scatter(plot_df[feature_col], plot_df[beta_col],
               c=years, cmap=cmap, norm=norm, s=16)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    ax.grid(True, alpha=0.3)

    sm = cm.ScalarMappable(norm=norm, cmap=cmap); sm.set_array([])
    cbar_ax = fig.add_axes([0.90, 0.15, 0.02, 0.70])
    fig.colorbar(sm, cax=cbar_ax, orientation='vertical', label='Year')
    plt.show()

# ---------- Plots (sans filtre) ----------
ratio_bounds = {'Vol_Ratio': (0.0, 5.0), 'Level_Ratio': (0.0, 5.0)}
for name, spec in REGS.items():
    for x in spec['x_cols']:
        beta_col = f"{name}.beta_{x}"
        scatter_beta_vs_feature(res_all, beta_col, 'diff_bps',
            f"{name} — beta({x}) vs diff_bps", "Diff niveau (IT - Swap) [bps]")
        scatter_beta_vs_feature(res_all, beta_col, 'Swap_10Y_vol_bps_1Y',
            f"{name} — beta({x}) vs Swap vol (bps)", "Swap 10Y vol 1Y [bps]")
        scatter_beta_vs_feature(res_all, beta_col, 'Swap_10Y',
            f"{name} — beta({x}) vs Swap level", "Swap 10Y level [%]")
        scatter_beta_vs_feature(res_all, beta_col, 'Vol_Ratio',
            f"{name} — beta({x}) vs Vol_Ratio (0–5)",
            "Vol_Ratio = IT vol / Swap vol", ratio_bounds=ratio_bounds)
        scatter_beta_vs_feature(res_all, beta_col, 'Level_Ratio',
            f"{name} — beta({x}) vs Level_Ratio (0–5)",
            "Level_Ratio = IT bps / Swap bps", ratio_bounds=ratio_bounds)

# ---------- Version filtrée (R²>0.5 et |t|>1.96) ----------
def filtered_view(res_df, reg_name, x_name, r2_thresh=0.5, t_thresh=1.96):
    r2_col = f"{reg_name}.r2"
    t_col  = f"{reg_name}.t_{x_name}"
    return res_df[(res_df[r2_col] > r2_thresh) & (res_df[t_col].abs() > t_thresh)]

for name, spec in REGS.items():
    for x in spec['x_cols']:
        beta_col = f"{name}.beta_{x}"
        sub = filtered_view(res_all, name, x)
        scatter_beta_vs_feature(sub, beta_col, 'diff_bps',
            f"[Filtered] {name} — beta({x}) vs diff_bps", "Diff niveau (IT - Swap) [bps]")
        scatter_beta_vs_feature(sub, beta_col, 'Swap_10Y_vol_bps_1Y',
            f"[Filtered] {name} — beta({x}) vs Swap vol (bps)", "Swap 10Y vol 1Y [bps]")
        scatter_beta_vs_feature(sub, beta_col, 'Swap_10Y',
            f"[Filtered] {name} — beta({x}) vs Swap level", "Swap 10Y level [%]")
        scatter_beta_vs_feature(sub, beta_col, 'Vol_Ratio',
            f"[Filtered] {name} — beta({x}) vs Vol_Ratio (0–5)",
            "Vol_Ratio = IT vol / Swap vol", ratio_bounds=ratio_bounds)
        scatter_beta_vs_feature(sub, beta_col, 'Level_Ratio',
            f"[Filtered] {name} — beta({x}) vs Level_Ratio (0–5)",
            "Level_Ratio = IT bps / Swap bps", ratio_bounds=ratio_bounds)


