import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import Normalize
import statsmodels.api as sm

# ==============================
# 1. Préparation Data
# ==============================
df_IT_10Y.index = pd.to_datetime(df_IT_10Y.index)
df_Swap_10Y.index = pd.to_datetime(df_Swap_10Y.index)
df_IT_10Y = df_IT_10Y.sort_index()
df_Swap_10Y = df_Swap_10Y.sort_index()

# Conversion en bps si en %
df_IT_10Y['IT_10Y_bps'] = df_IT_10Y['IT_10Y'] * 100
df_Swap_10Y['Swap_10Y_bps'] = df_Swap_10Y['Swap_10Y'] * 100

# ==============================
# 2. Vol annualisée 1Y (variations quotidiennes)
# ==============================
WINDOW = 252  # ~1 an ouvré

# IT 10Y
df_IT_10Y['IT_10Y_chg_bps'] = df_IT_10Y['IT_10Y_bps'].diff()
df_IT_10Y['IT_10Y_vol_bps_1Y'] = (
    df_IT_10Y['IT_10Y_chg_bps']
      .rolling(WINDOW, min_periods=WINDOW)
      .std() * np.sqrt(252)
)

# Swap 10Y
df_Swap_10Y['Swap_10Y_chg_bps'] = df_Swap_10Y['Swap_10Y_bps'].diff()
df_Swap_10Y['Swap_10Y_vol_bps_1Y'] = (
    df_Swap_10Y['Swap_10Y_chg_bps']
      .rolling(WINDOW, min_periods=WINDOW)
      .std() * np.sqrt(252)
)

# ==============================
# 3. Fusion & colonnes dérivées
# ==============================
df = pd.concat([
    df_IT_10Y[['IT_10Y', 'IT_10Y_bps', 'IT_10Y_vol_bps_1Y']],
    df_Swap_10Y[['Swap_10Y', 'Swap_10Y_bps', 'Swap_10Y_vol_bps_1Y']]
], axis=1, join='inner').dropna()

df['diff_bps'] = df['IT_10Y_bps'] - df['Swap_10Y_bps']
df['diff_vol_bps'] = df['IT_10Y_vol_bps_1Y'] - df['Swap_10Y_vol_bps_1Y']
df['Level_Ratio'] = df['IT_10Y_bps'] / df['Swap_10Y_bps']
df['Vol_Ratio'] = df['IT_10Y_vol_bps_1Y'] / df['Swap_10Y_vol_bps_1Y']

# Filtre outliers Level_Ratio > 10 ou <=0
df = df[(df['Level_Ratio'] <= 10) & (df['Level_Ratio'] > 0)]

# ==============================
# 4. Fonction scatter heatmap
# ==============================
def scatter_yearcolor(x, y, index, xlabel, ylabel, title, ratio_bounds=None, beta_bounds=None):
    plot_df = pd.DataFrame({xlabel: x, ylabel: y}, index=index).dropna()

    if ratio_bounds:
        lo, hi = ratio_bounds
        plot_df = plot_df[(plot_df[xlabel] > lo) & (plot_df[xlabel] < hi)]

    if beta_bounds:
        lo, hi = beta_bounds
        plot_df = plot_df[(plot_df[ylabel] > lo) & (plot_df[ylabel] < hi)]

    if plot_df.empty:
        return

    years = plot_df.index.year
    norm = Normalize(vmin=years.min(), vmax=years.max())
    cmap = cm.get_cmap('coolwarm')

    fig, ax = plt.subplots(figsize=(8, 6))
    fig.subplots_adjust(right=0.88)
    ax.scatter(plot_df[xlabel], plot_df[ylabel], c=years, cmap=cmap, norm=norm, s=16)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    ax.grid(True, alpha=0.3)

    sm = cm.ScalarMappable(norm=norm, cmap=cmap)
    sm.set_array([])
    cbar_ax = fig.add_axes([0.90, 0.15, 0.02, 0.70])
    fig.colorbar(sm, cax=cbar_ax, orientation='vertical', label='Year')
    plt.show()

# ==============================
# 5. Plots initiaux
# ==============================
scatter_yearcolor(df['IT_10Y_bps'], df['IT_10Y_vol_bps_1Y'], df.index,
                  'IT_10Y_bps', 'IT_10Y_vol_bps_1Y', 'IT Vol vs IT Level')
scatter_yearcolor(df['Swap_10Y_bps'], df['Swap_10Y_vol_bps_1Y'], df.index,
                  'Swap_10Y_bps', 'Swap_10Y_vol_bps_1Y', 'Swap Vol vs Swap Level')

# Plots ratio/diff
scatter_yearcolor(df['diff_bps'], df['Vol_Ratio'], df.index,
                  'diff_bps', 'Vol_Ratio', 'Vol_Ratio vs diff_bps')
scatter_yearcolor(df['diff_bps'], df['diff_vol_bps'], df.index,
                  'diff_bps', 'diff_vol_bps', 'diff_vol_bps vs diff_bps')

# ==============================
# 6. Rolling régressions
# ==============================
def rolling_ols(df_in, y_col, x_cols, window=126, add_const=True, prefix=""):
    y = pd.to_numeric(df_in[y_col], errors='coerce')
    X = df_in[x_cols].apply(pd.to_numeric, errors='coerce')
    data = pd.concat([y, X], axis=1).dropna()
    if len(data) < window:
        return pd.DataFrame(index=pd.DatetimeIndex([]))
    res_rows, idx_rows = [], []
    for i in range(window-1, len(data)):
        win = data.iloc[i-window+1:i+1]
        y_win = win[y_col]
        X_win = win[x_cols]
        if add_const:
            X_win = sm.add_constant(X_win, has_constant='add')
        try:
            fit = sm.OLS(y_win, X_win, missing='drop').fit()
        except:
            continue
        row = {f"beta_{c}": fit.params.get(c, np.nan) for c in x_cols}
        row.update({f"t_{c}": fit.tvalues.get(c, np.nan) for c in x_cols})
        row['r2'] = fit.rsquared
        res_rows.append(row)
        idx_rows.append(win.index[-1])
    out = pd.DataFrame(res_rows, index=pd.DatetimeIndex(idx_rows))
    if prefix:
        out = out.add_prefix(prefix)
    return out

ROLLING_WINDOW = 126
REGS = {
    "R1_volIT_vs_volSwap": {'x_cols': ['Swap_10Y_vol_bps_1Y']},
    "R2_volIT_vs_volSwap_and_ITlevel": {'x_cols': ['Swap_10Y_vol_bps_1Y', 'IT_10Y']},
    "R3_volIT_vs_diffbps_and_volSwap": {'x_cols': ['diff_bps', 'Swap_10Y_vol_bps_1Y']},
    "R4_volIT_vs_volSwap_and_SwapLevel": {'x_cols': ['Swap_10Y_vol_bps_1Y', 'Swap_10Y']},
}

roll_results = {}
for name, spec in REGS.items():
    roll_results[name] = rolling_ols(df, 'IT_10Y_vol_bps_1Y', spec['x_cols'],
                                     window=ROLLING_WINDOW, add_const=True, prefix=f"{name}.")

features_for_plot = df[['diff_bps', 'Swap_10Y_vol_bps_1Y', 'Swap_10Y', 'Vol_Ratio', 'Level_Ratio']].copy()
res_all = features_for_plot.copy()
for name, res in roll_results.items():
    res_all = res_all.join(res, how='left')

# ==============================
# 7. Plots betas vs features (avec filtre beta_bounds)
# ==============================
ratio_bounds = {'Vol_Ratio': (0.0, 5.0), 'Level_Ratio': (0.0, 5.0)}
beta_bounds = (0.0, 5.0)  # bornes pour betas

for name, spec in REGS.items():
    for x in spec['x_cols']:
        beta_col = f"{name}.beta_{x}"
        scatter_yearcolor(res_all[beta_col], res_all['diff_bps'], res_all.index,
                          'diff_bps', beta_col, f"{name} — beta({x}) vs diff_bps",
                          beta_bounds=beta_bounds)
        scatter_yearcolor(res_all[beta_col], res_all['Swap_10Y_vol_bps_1Y'], res_all.index,
                          'Swap_10Y_vol_bps_1Y', beta_col, f"{name} — beta({x}) vs Swap vol",
                          beta_bounds=beta_bounds)
        scatter_yearcolor(res_all[beta_col], res_all['Swap_10Y'], res_all.index,
                          'Swap_10Y', beta_col, f"{name} — beta({x}) vs Swap level",
                          beta_bounds=beta_bounds)
        scatter_yearcolor(res_all[beta_col], res_all['Vol_Ratio'], res_all.index,
                          'Vol_Ratio', beta_col, f"{name} — beta({x}) vs Vol_Ratio",
                          ratio_bounds=ratio_bounds['Vol_Ratio'], beta_bounds=beta_bounds)
        scatter_yearcolor(res_all[beta_col], res_all['Level_Ratio'], res_all.index,
                          'Level_Ratio', beta_col, f"{name} — beta({x}) vs Level_Ratio",
                          ratio_bounds=ratio_bounds['Level_Ratio'], beta_bounds=beta_bounds)

# ==============================
# 8. Version filtrée (R²>0.5 & |t|>1.96) + beta_bounds
# ==============================
def filtered_view(res_df, reg_name, x_name, r2_thresh=0.5, t_thresh=1.96):
    return res_df[(res_df[f"{reg_name}.r2"] > r2_thresh) & (res_df[f"{reg_name}.t_{x_name}"].abs() > t_thresh)]

for name, spec in REGS.items():
    for x in spec['x_cols']:
        beta_col = f"{name}.beta_{x}"
        sub = filtered_view(res_all, name, x)
        scatter_yearcolor(sub[beta_col], sub['diff_bps'], sub.index,
                          'diff_bps', beta_col, f"[Filtered] {name} — beta({x}) vs diff_bps",
                          beta_bounds=beta_bounds)
        scatter_yearcolor(sub[beta_col], sub['Swap_10Y_vol_bps_1Y'], sub.index,
                          'Swap_10Y_vol_bps_1Y', beta_col, f"[Filtered] {name} — beta({x}) vs Swap vol",
                          beta_bounds=beta_bounds)
        scatter_yearcolor(sub[beta_col], sub['Swap_10Y'], sub.index,
                          'Swap_10Y', beta_col, f"[Filtered] {name} — beta({x}) vs Swap level",
                          beta_bounds=beta_bounds)
        scatter_yearcolor(sub[beta_col], sub['Vol_Ratio'], sub.index,
                          'Vol_Ratio', beta_col, f"[Filtered] {name} — beta({x}) vs Vol_Ratio",
                          ratio_bounds=ratio_bounds['Vol_Ratio'], beta_bounds=beta_bounds)
        scatter_yearcolor(sub[beta_col], sub['Level_Ratio'], sub.index,
                          'Level_Ratio', beta_col, f"[Filtered] {name} — beta({x}) vs Level_Ratio",
                          ratio_bounds=ratio_bounds['Level_Ratio'], beta_bounds=beta_bounds)






#Test : 


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import Normalize
import statsmodels.api as sm

# --- Données & prépa vols annualisées ---
WINDOW = 252
ROLLING_WINDOW = 126

# Index datetime
df_IT_10Y.index = pd.to_datetime(df_IT_10Y.index)
df_Swap_10Y.index = pd.to_datetime(df_Swap_10Y.index)

# Conversion bps
df_IT_10Y['IT_10Y_bps'] = df_IT_10Y['IT_10Y'] * 100
df_Swap_10Y['Swap_10Y_bps'] = df_Swap_10Y['Swap_10Y'] * 100

# Vol annualisée (diff journalière)
df_IT_10Y['IT_10Y_chg_bps'] = df_IT_10Y['IT_10Y_bps'].diff()
df_IT_10Y['IT_10Y_vol_bps_1Y'] = df_IT_10Y['IT_10Y_chg_bps'].rolling(WINDOW, min_periods=WINDOW).std() * np.sqrt(252)

df_Swap_10Y['Swap_10Y_chg_bps'] = df_Swap_10Y['Swap_10Y_bps'].diff()
df_Swap_10Y['Swap_10Y_vol_bps_1Y'] = df_Swap_10Y['Swap_10Y_chg_bps'].rolling(WINDOW, min_periods=WINDOW).std() * np.sqrt(252)

# --- Fusion ---
df = pd.concat([
    df_IT_10Y[['IT_10Y', 'IT_10Y_bps', 'IT_10Y_vol_bps_1Y']],
    df_Swap_10Y[['Swap_10Y', 'Swap_10Y_bps', 'Swap_10Y_vol_bps_1Y']]
], axis=1, join='inner').dropna()

# Colonnes dérivées
df['diff_bps'] = df['IT_10Y_bps'] - df['Swap_10Y_bps']
df['Level_Ratio'] = df['IT_10Y_bps'] / df['Swap_10Y_bps']
df['Vol_Ratio'] = df['IT_10Y_vol_bps_1Y'] / df['Swap_10Y_vol_bps_1Y']

# Filtre ratios extrêmes
df = df[(df['Level_Ratio'] > 0) & (df['Level_Ratio'] <= 5)]
df = df[(df['Vol_Ratio'] > 0) & (df['Vol_Ratio'] <= 5)]

# --- Rolling régression ---
def rolling_ols_single(y, x, window):
    data = pd.concat([y, x], axis=1).dropna()
    res_rows, idx_rows = [], []
    for i in range(window-1, len(data)):
        win = data.iloc[i-window+1:i+1]
        y_win, x_win = win.iloc[:, 0], sm.add_constant(win.iloc[:, 1])
        fit = sm.OLS(y_win, x_win).fit()
        res_rows.append({
            'beta': fit.params.iloc[1],
            'tstat': fit.tvalues.iloc[1],
            'r2': fit.rsquared
        })
        idx_rows.append(win.index[-1])
    return pd.DataFrame(res_rows, index=idx_rows)

reg_results = rolling_ols_single(df['IT_10Y_vol_bps_1Y'], df['Swap_10Y_vol_bps_1Y'], ROLLING_WINDOW)
df_res = df.join(reg_results, how='left')

# --- Fonction plot heatmap ---
def scatter_yearcolor(x, y, index, xlabel, ylabel, title, beta_bounds=(0,5), ratio_bounds=None):
    plot_df = pd.DataFrame({xlabel: x, ylabel: y}, index=index).dropna()
    if beta_bounds:
        lo, hi = beta_bounds
        plot_df = plot_df[(plot_df[ylabel] > lo) & (plot_df[ylabel] < hi)]
    if ratio_bounds:
        lo, hi = ratio_bounds
        plot_df = plot_df[(plot_df[xlabel] > lo) & (plot_df[xlabel] < hi)]
    if plot_df.empty:
        return
    years = plot_df.index.year
    norm = Normalize(vmin=years.min(), vmax=years.max())
    cmap = cm.get_cmap('coolwarm')
    fig, ax = plt.subplots(figsize=(8, 6))
    fig.subplots_adjust(right=0.88)
    sc = ax.scatter(plot_df[xlabel], plot_df[ylabel], c=years, cmap=cmap, norm=norm, s=16)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    ax.grid(True, alpha=0.3)
    smap = cm.ScalarMappable(norm=norm, cmap=cmap)
    smap.set_array([])
    cbar_ax = fig.add_axes([0.90, 0.15, 0.02, 0.70])
    fig.colorbar(smap, cax=cbar_ax, orientation='vertical', label='Year')
    plt.show()

# --- Plots non filtrés par R²/tstat ---
scatter_yearcolor(df_res['diff_bps'], df_res['beta'], df_res.index, 'diff_bps', 'beta', 'Beta vs diff_bps')
scatter_yearcolor(df_res['Swap_10Y_bps'], df_res['beta'], df_res.index, 'Swap_10Y_bps', 'beta', 'Beta vs Swap level')
scatter_yearcolor(df_res['Level_Ratio'], df_res['beta'], df_res.index, 'Level_Ratio', 'beta', 'Beta vs Level_Ratio')
scatter_yearcolor(df_res['Vol_Ratio'], df_res['beta'], df_res.index, 'Vol_Ratio', 'beta', 'Beta vs Vol_Ratio')

# --- Filtre significativité ---
df_sig = df_res[(df_res['r2'] > 0.6) & (df_res['tstat'].abs() > 2)]

scatter_yearcolor(df_sig['diff_bps'], df_sig['beta'], df_sig.index, 'diff_bps', 'beta', '[Filtered] Beta vs diff_bps')
scatter_yearcolor(df_sig['Swap_10Y_bps'], df_sig['beta'], df_sig.index, 'Swap_10Y_bps', 'beta', '[Filtered] Beta vs Swap level')
scatter_yearcolor(df_sig['Level_Ratio'], df_sig['beta'], df_sig.index, 'Level_Ratio', 'beta', '[Filtered] Beta vs Level_Ratio')
scatter_yearcolor(df_sig['Vol_Ratio'], df_sig['beta'], df_sig.index, 'Vol_Ratio', 'beta', '[Filtered] Beta vs Vol_Ratio')




# Time series : 

# ==============================
# 6. Plots time-series
# ==============================

# Vols
plt.figure(figsize=(10,5))
plt.plot(df.index, df['IT_10Y_vol_bps_1Y'], label='IT 10Y vol (bps)')
plt.plot(df.index, df['Swap_10Y_vol_bps_1Y'], label='Swap 10Y vol (bps)')
plt.title('IT vs Swap 10Y Vol (bps)')
plt.xlabel('Date')
plt.ylabel('Vol (bps)')
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()

# Levels
plt.figure(figsize=(10,5))
plt.plot(df.index, df['IT_10Y_bps'], label='IT 10Y level (bps)')
plt.plot(df.index, df['Swap_10Y_bps'], label='Swap 10Y level (bps)')
plt.title('IT vs Swap 10Y Level (bps)')
plt.xlabel('Date')
plt.ylabel('Level (bps)')
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()

# Vol IT seul
plt.figure(figsize=(10,4))
plt.plot(df.index, df['IT_10Y_vol_bps_1Y'], color='blue')
plt.title('IT 10Y Vol (bps)')
plt.xlabel('Date')
plt.ylabel('Vol (bps)')
plt.grid(True, alpha=0.3)
plt.show()

# Vol Swap seul
plt.figure(figsize=(10,4))
plt.plot(df.index, df['Swap_10Y_vol_bps_1Y'], color='orange')
plt.title('Swap 10Y Vol (bps)')
plt.xlabel('Date')
plt.ylabel('Vol (bps)')
plt.grid(True, alpha=0.3)
plt.show()

# Level IT seul
plt.figure(figsize=(10,4))
plt.plot(df.index, df['IT_10Y_bps'], color='blue')
plt.title('IT 10Y Level (bps)')
plt.xlabel('Date')
plt.ylabel('Level (bps)')
plt.grid(True, alpha=0.3)
plt.show()

# Level Swap seul
plt.figure(figsize=(10,4))
plt.plot(df.index, df['Swap_10Y_bps'], color='orange')
plt.title('Swap 10Y Level (bps)')
plt.xlabel('Date')
plt.ylabel('Level (bps)')
plt.grid(True, alpha=0.3)
plt.show()



def scatter_yearcolor(x, y, index, xlabel, ylabel, title, ratio_bounds=None, beta_bounds=None, poly_deg=2):
    plot_df = pd.DataFrame({xlabel: x, ylabel: y}, index=index).dropna()

    if ratio_bounds:
        lo, hi = ratio_bounds
        plot_df = plot_df[(plot_df[xlabel] > lo) & (plot_df[xlabel] < hi)]

    if beta_bounds:
        lo, hi = beta_bounds
        plot_df = plot_df[(plot_df[ylabel] > lo) & (plot_df[ylabel] < hi)]

    if plot_df.empty:
        return

    years = plot_df.index.year
    norm = Normalize(vmin=years.min(), vmax=years.max())
    cmap = cm.get_cmap('coolwarm')

    fig, ax = plt.subplots(figsize=(8, 6))
    fig.subplots_adjust(right=0.88)

    # Scatter coloré par années
    ax.scatter(plot_df[xlabel], plot_df[ylabel], c=years, cmap=cmap, norm=norm, s=16, alpha=0.7)

    # Best fit curve (polynomiale degré 2)
    coeffs = np.polyfit(plot_df[xlabel], plot_df[ylabel], deg=poly_deg)
    p = np.poly1d(coeffs)
    xs_sorted = np.linspace(plot_df[xlabel].min(), plot_df[xlabel].max(), 300)
    ax.plot(xs_sorted, p(xs_sorted), color="black", linewidth=2, label=f'Poly fit (deg={poly_deg})')

    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    ax.grid(True, alpha=0.3)
    ax.legend()

    # Colorbar
    sm = cm.ScalarMappable(norm=norm, cmap=cmap)
    sm.set_array([])
    cbar_ax = fig.add_axes([0.90, 0.15, 0.02, 0.70])
    fig.colorbar(sm, cax=cbar_ax, orientation='vertical', label='Year')

    plt.show()



import matplotlib.dates as mdates

# ===== Paramètre de fenêtre pour la corrélation roulante =====
CORR_WINDOW = 126  # ~6 mois ouvrés (change si tu veux)

# Assure-toi qu'on a bien les colonnes et des dates alignées
vols = df[['IT_10Y_vol_bps_1Y', 'Swap_10Y_vol_bps_1Y', 'diff_bps']].dropna().copy()

# Corrélation roulante (IT vol vs Swap vol)
vols['roll_corr_vols'] = (
    vols['IT_10Y_vol_bps_1Y']
    .rolling(CORR_WINDOW, min_periods=CORR_WINDOW)
    .corr(vols['Swap_10Y_vol_bps_1Y'])
)

# Corrélation globale (sur tout l'échantillon aligné)
full_corr = vols[['IT_10Y_vol_bps_1Y', 'Swap_10Y_vol_bps_1Y']].corr().iloc[0, 1]

# ===== Plot: corrélation (axe gauche) + spread de niveau IT - Swap (axe droit) =====
fig, ax1 = plt.subplots(figsize=(11, 5))

# Corrélation roulante — axe gauche
ax1.plot(vols.index, vols['roll_corr_vols'], label=f'Rolling corr ({CORR_WINDOW}d)', linewidth=1.4)
ax1.set_ylabel('Corr(Vol IT, Vol Swap)')
ax1.set_ylim(-1.0, 1.0)
ax1.axhline(0.0, linestyle='--', linewidth=1, alpha=0.6)
ax1.grid(True, alpha=0.3)

# Axe X format années
ax1.xaxis.set_major_locator(mdates.YearLocator())
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

# Spread — axe droit
ax2 = ax1.twinx()
ax2.plot(vols.index, vols['diff_bps'], label='Spread IT - Swap (bps)', linewidth=1.2)
ax2.set_ylabel('Spread (bps)')

# Légende combinée
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')

# Titre avec la corrélation globale en rappel
plt.title(f'Rolling corr(Vol IT, Vol Swap) & Spread IT-Swap — full corr = {full_corr:.2f}')
plt.tight_layout()
plt.show()



import matplotlib.dates as mdates

# ===== Paramètres =====
CORR_WINDOW = 126  # ~6 mois ouvrés
corr_col = f'RollCorr_Vols_{CORR_WINDOW}d'

# 1) Ajouter la corrélation roulante à df si absente
if corr_col not in df.columns:
    df[corr_col] = (
        df['IT_10Y_vol_bps_1Y']
        .rolling(CORR_WINDOW, min_periods=CORR_WINDOW)
        .corr(df['Swap_10Y_vol_bps_1Y'])
    )

# 2) Corrélation globale
full_corr = (
    df[['IT_10Y_vol_bps_1Y', 'Swap_10Y_vol_bps_1Y']]
    .dropna()
    .corr()
    .iloc[0, 1]
)

# 3) Masque des points valides
mask = df[corr_col].notna() & df['diff_bps'].notna()

# 4) Plot avec couleurs différentes et axes distincts
fig, ax1 = plt.subplots(figsize=(11, 5))

# Courbe corrélation
ax1.plot(df.index[mask], df.loc[mask, corr_col], color='tab:blue',
         linewidth=1.4, label=f'Rolling corr ({CORR_WINDOW}d)')
ax1.set_ylabel('Corr(Vol IT, Vol Swap)', color='tab:blue')
ax1.tick_params(axis='y', labelcolor='tab:blue')
ax1.set_ylim(-1, 1)
ax1.axhline(0, linestyle='--', linewidth=1, alpha=0.6, color='grey')
ax1.grid(True, alpha=0.3)

# Axe secondaire pour le spread
ax2 = ax1.twinx()
ax2.plot(df.index[mask], df.loc[mask, 'diff_bps'], color='tab:red',
         linewidth=1.2, label='Spread IT - Swap (bps)')
ax2.set_ylabel('Spread (bps)', color='tab:red')
ax2.tick_params(axis='y', labelcolor='tab:red')

# Légende combinée
h1, l1 = ax1.get_legend_handles_labels()
h2, l2 = ax2.get_legend_handles_labels()
ax1.legend(h1 + h2, l1 + l2, loc='upper left')

# Format des dates
ax1.xaxis.set_major_locator(mdates.YearLocator())
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

# Titre
ax1.set_title(f'Rolling corr(Vol IT, Vol Swap) & Spread IT-Swap — full corr = {full_corr:.2f}')

plt.tight_layout()
plt.show()




# ========================================
# ANALYSE Inflation Swap Vol
# ========================================

# --- 1) Plot vol inflation swap vs level inflation swap ---
scatter_yearcolor(
    df_Inflation_Swap_10Y['Inflation_Swap_10Y_bps'],
    df_Inflation_Swap_10Y['Inflation_Swap_10Y_vol_bps_1Y'],
    df_Inflation_Swap_10Y.index,
    'Inflation_Swap_10Y_bps',
    'Inflation_Swap_10Y_vol_bps_1Y',
    'Inflation Swap Vol vs Inflation Swap Level'
)

# --- 2) Plot vol inflation swap vs level interest rate swap ---
df_merge = df_Inflation_Swap_10Y[['Inflation_Swap_10Y_vol_bps_1Y']].join(
    df[['Swap_10Y_bps']], how='inner'
)
scatter_yearcolor(
    df_merge['Swap_10Y_bps'],
    df_merge['Inflation_Swap_10Y_vol_bps_1Y'],
    df_merge.index,
    'Swap_10Y_bps',
    'Inflation_Swap_10Y_vol_bps_1Y',
    'Inflation Swap Vol vs Interest Rate Swap Level'
)

# --- 3) Corrélation Inflation Swap Vol ↔ Interest Rate Swap Vol ---
CORR_WINDOW = 126  # ~6 mois ouvrés
corr_col_inf_vs_swap = f'RollCorr_InfSwapVol_SwapVol_{CORR_WINDOW}d'
df_corr1 = df_Inflation_Swap_10Y[['Inflation_Swap_10Y_vol_bps_1Y']].join(
    df[['Swap_10Y_vol_bps_1Y']], how='inner'
)
df_corr1[corr_col_inf_vs_swap] = (
    df_corr1['Inflation_Swap_10Y_vol_bps_1Y']
      .rolling(CORR_WINDOW, min_periods=CORR_WINDOW)
      .corr(df_corr1['Swap_10Y_vol_bps_1Y'])
)

# --- 4) Corrélation Inflation Swap Vol ↔ Italy Vol ---
corr_col_inf_vs_it = f'RollCorr_InfSwapVol_ITVol_{CORR_WINDOW}d'
df_corr2 = df_Inflation_Swap_10Y[['Inflation_Swap_10Y_vol_bps_1Y']].join(
    df[['IT_10Y_vol_bps_1Y']], how='inner'
)
df_corr2[corr_col_inf_vs_it] = (
    df_corr2['Inflation_Swap_10Y_vol_bps_1Y']
      .rolling(CORR_WINDOW, min_periods=CORR_WINDOW)
      .corr(df_corr2['IT_10Y_vol_bps_1Y'])
)

# --- 5) Fusion pour tracer les deux corrélations ---
df_corr_all = df_corr1[[corr_col_inf_vs_swap]].join(
    df_corr2[[corr_col_inf_vs_it]], how='inner'
)

# --- 6) Plot des deux corrélations sur le même graphique ---
fig, ax = plt.subplots(figsize=(11, 5))
ax.plot(df_corr_all.index, df_corr_all[corr_col_inf_vs_swap],
        color='tab:blue', label='Corr(Inflation Swap Vol, Swap Vol)', linewidth=1.4)
ax.plot(df_corr_all.index, df_corr_all[corr_col_inf_vs_it],
        color='tab:green', label='Corr(Inflation Swap Vol, IT Vol)', linewidth=1.4)
ax.set_ylabel('Correlation')
ax.set_ylim(-1, 1)
ax.axhline(0, linestyle='--', linewidth=1, alpha=0.6, color='grey')
ax.grid(True, alpha=0.3)
ax.xaxis.set_major_locator(mdates.YearLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
ax.legend(loc='upper left')
plt.title(f'Rolling Correlations ({CORR_WINDOW}d)')
plt.tight_layout()
plt.show()

# --- 6a) Plot Corr(Inflation Swap Vol, Swap Vol) ---
fig, ax = plt.subplots(figsize=(11, 5))
ax.plot(df_corr_all.index, df_corr_all[corr_col_inf_vs_swap],
        color='tab:blue', linewidth=1.4)
ax.set_ylabel('Correlation')
ax.set_ylim(-1, 1)
ax.axhline(0, linestyle='--', linewidth=1, alpha=0.6, color='grey')
ax.grid(True, alpha=0.3)
ax.xaxis.set_major_locator(mdates.YearLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
ax.set_title(f'Rolling Corr ({CORR_WINDOW}d) : Inflation Swap Vol vs Swap Vol')
plt.tight_layout()
plt.show()

# --- 6b) Plot Corr(Inflation Swap Vol, IT Vol) ---
fig, ax = plt.subplots(figsize=(11, 5))
ax.plot(df_corr_all.index, df_corr_all[corr_col_inf_vs_it],
        color='tab:green', linewidth=1.4)
ax.set_ylabel('Correlation')
ax.set_ylim(-1, 1)
ax.axhline(0, linestyle='--', linewidth=1, alpha=0.6, color='grey')
ax.grid(True, alpha=0.3)
ax.xaxis.set_major_locator(mdates.YearLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
ax.set_title(f'Rolling Corr ({CORR_WINDOW}d) : Inflation Swap Vol vs IT Vol')
plt.tight_layout()
plt.show()


import pandas as pd

def countries_buckets_view(bond_list):
    # colonnes = tous les buckets triés (int si possible)
    def nb(x):
        try: return int(x)
        except: return x
    buckets = sorted({nb(b) for d in bond_list.values() for b in d},
                     key=lambda x: (isinstance(x, str), x))

    rows = []
    for country, bdict in bond_list.items():
        bdict = {nb(k): v for k, v in bdict.items()}
        max_len = max([len(v.get("members", [])) for v in bdict.values()] + [0])
        for r in range(max_len):  # r = ligne 1..max
            row = {"country": country, "_row": r+1}
            for b in buckets:
                members = bdict.get(b, {}).get("members", [])
                row[b] = members[r] if r < len(members) else ""
            rows.append(row)

    # index = (country, _row)  -> pandas n'affiche le country qu'une fois par bloc
    df = (pd.DataFrame(rows)
            .set_index(["country", "_row"])
            .sort_index(level=[0,1]))
    return df


