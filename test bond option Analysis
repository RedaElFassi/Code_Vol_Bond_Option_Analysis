import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional

# =========================
# CONFIG — modifie ici
# =========================
MATURITIES = ["2Y", "5Y", "10Y", "15Y", "20Y"]  # tu peux ajouter/enlever des maturités
PERIODS_PER_YEAR = 252        # quotidien par défaut
ROLLING_WINDOW = 252          # fenêtre 1 an ~252 jours
VOL_LABEL = "1Y"              # préfixe dans le nom de colonnes de volatilité

# =========================
# HELPERS
# =========================
def infer_prefix(df: pd.DataFrame, maturities: List[str]) -> Optional[str]:
    """
    Déduit le prefix (avant le dernier '_') à partir des colonnes qui finissent par '_<MATU>'.
    Ex: 'IT_10Y' -> 'IT'; 'Inflation_Swap_10Y' -> 'Inflation_Swap'.
    S'il y a plusieurs prefixes potentiels, on prend le premier unique trouvé.
    """
    prefixes = []
    for c in df.columns:
        for m in maturities:
            suff = "_" + m
            if c.endswith(suff):
                prefixes.append(c[: -len(suff)])
                break
    prefixes = list(dict.fromkeys(prefixes))
    return prefixes[0] if prefixes else None


def list_existing_maturities(df: pd.DataFrame, prefix: str, maturities: List[str]) -> List[str]:
    """Renvoie les maturités effectivement présentes dans df pour ce prefix."""
    return [m for m in maturities if f"{prefix}_{m}" in df.columns]


def convert_percent_to_bps(df: pd.DataFrame, prefix: str, maturities: List[str]) -> pd.DataFrame:
    """
    Pour chaque '<prefix>_<MATU>' (en points de %), crée '<prefix>_<MATU>_bps' = % * 100.
    """
    out = df.copy()
    for m in list_existing_maturities(out, prefix, maturities):
        col = f"{prefix}_{m}"
        out[f"{prefix}_{m}_bps"] = out[col] * 100.0  # 1% = 100 bps
    return out


def add_rolling_annualized_vol(
    df: pd.DataFrame,
    prefix: str,
    maturities: List[str],
    window: int = ROLLING_WINDOW,
    periods_per_year: int = PERIODS_PER_YEAR,
    vol_label: str = VOL_LABEL,
) -> pd.DataFrame:
    """
    Pour chaque '<prefix>_<MATU>_bps', calcule la vol annualisée des variations journalières:
      vol = std( diff(bps), rolling window ) * sqrt(periods_per_year)
    Colonne: '<VOL_LABEL>_Vol_<prefix>_<MATU>'
    """
    out = df.copy()
    for m in list_existing_maturities(out, prefix, maturities):
        bps = f"{prefix}_{m}_bps"
        if bps in out.columns:
            dx = out[bps].diff()
            vol = dx.rolling(window=window, min_periods=max(2, window // 4)).std() * np.sqrt(periods_per_year)
            out[f"{vol_label}_Vol_{prefix}_{m}"] = vol
    return out


def add_diff_vs_swap(
    df_country: pd.DataFrame,
    country_prefix: str,
    df_swap: pd.DataFrame,
    swap_prefix: str,
    maturities: List[str],
) -> pd.DataFrame:
    """
    Ajoute, dans la df du pays, pour chaque maturité:
      'diff_bps_<MATU>_<country_prefix>_Swap' = '<country_prefix>_<MATU>_bps' - '<swap_prefix>_<MATU>_bps'
    Alignement par index.
    """
    out = df_country.copy()
    for m in list_existing_maturities(out, country_prefix, maturities):
        c_bps = f"{country_prefix}_{m}_bps"
        s_bps = f"{swap_prefix}_{m}_bps"
        if c_bps in out.columns and s_bps in df_swap.columns:
            out[f"diff_bps_{m}_{country_prefix}_Swap"] = out[c_bps] - df_swap[s_bps].reindex(out.index)
    return out


def process_curve_df(
    df: pd.DataFrame,
    prefix: Optional[str],
    maturities: List[str],
    window: int = ROLLING_WINDOW,
    periods_per_year: int = PERIODS_PER_YEAR,
    vol_label: str = VOL_LABEL,
) -> Tuple[pd.DataFrame, str]:
    """
    % -> bps + vol annualisée (rolling) pour une courbe.
    Si prefix est None, on essaie de l'inférer.
    Retourne (df_enrichie, prefix_utilisé).
    """
    if prefix is None:
        prefix = infer_prefix(df, maturities)
        if prefix is None:
            raise ValueError("Impossible d'inférer le prefix depuis les colonnes.")
    out = convert_percent_to_bps(df, prefix, maturities)
    out = add_rolling_annualized_vol(out, prefix, maturities, window, periods_per_year, vol_label)
    return out, prefix


# =========================
# PIPELINE PRINCIPALE
# =========================
def prepare_inputs(
    countries: Dict[str, pd.DataFrame],   # {"France": df_FR, "Italy": df_IT, ...}
    df_Swap: pd.DataFrame,
    df_Inflation_Swap: Optional[pd.DataFrame],
    maturities: List[str] = MATURITIES,
    periods_per_year: int = PERIODS_PER_YEAR,
    window: int = ROLLING_WINDOW,
    vol_label: str = VOL_LABEL,
    swap_prefix: Optional[str] = None,              # si None, inféré (devrait être "Swap")
    infl_swap_prefix: Optional[str] = None,         # si None, inféré (devrait être "Inflation_Swap")
    country_prefix_map: Optional[Dict[str, str]] = None,  # ex: {"Italy":"IT","France":"FR"} (sinon inféré)
) -> Tuple[Dict[str, pd.DataFrame], pd.DataFrame, Optional[pd.DataFrame], Dict[str, str]]:
    """
    - Enrichit: toutes les DF pays, df_Swap, df_Inflation_Swap.
    - Ajoute les diffs pays vs Swap dans chaque DF pays.
    - Noms de colonnes:
        * bps:        '<prefix>_<MATU>_bps'
        * vol:        '<VOL_LABEL>_Vol_<prefix>_<MATU>'   (ex: '1Y_Vol_Swap_10Y')
        * diff pays:  'diff_bps_<MATU>_<COUNTRY_PREFIX>_Swap' (ex: 'diff_bps_10Y_IT_Swap')
    - Retourne:
        (countries_out, swap_out, infl_out, prefixes_utilisés_par_pays)
    """
    # 1) Swaps
    swap_out, swap_prefix_used = process_curve_df(
        df_Swap, swap_prefix, maturities, window, periods_per_year, vol_label
    )

    # 2) Inflation Swaps (optionnel)
    infl_out = None
    infl_prefix_used = None
    if df_Inflation_Swap is not None:
        infl_out, infl_prefix_used = process_curve_df(
            df_Inflation_Swap, infl_swap_prefix, maturities, window, periods_per_year, vol_label
        )

    # 3) Pays
    countries_out: Dict[str, pd.DataFrame] = {}
    used_country_prefixes: Dict[str, str] = {}
    for country_name, df_country in countries.items():
        pfx = None
        if country_prefix_map and country_name in country_prefix_map:
            pfx = country_prefix_map[country_name]
        country_proc, pfx_used = process_curve_df(
            df_country, pfx, maturities, window, periods_per_year, vol_label
        )
        used_country_prefixes[country_name] = pfx_used

        # add diffs vs swap (sur la DF du pays)
        country_proc = add_diff_vs_swap(
            df_country=country_proc,
            country_prefix=pfx_used,
            df_swap=swap_out,
            swap_prefix=swap_prefix_used,
            maturities=maturities,
        )

        countries_out[country_name] = country_proc

    return countries_out, swap_out, infl_out, used_country_prefixes


# exemple d’entrée
countries = {
    "Italy": df_IT,   # colonnes: IT_2Y, IT_5Y, IT_10Y, IT_15Y, IT_20Y
    "France": df_FR,  # colonnes: FR_2Y, FR_5Y, ...
}
# df_Swap: colonnes: Swap_2Y, Swap_5Y, ...
# df_Inflation_Swap: colonnes: Inflation_Swap_2Y, ...

countries_out, swap_out, infl_out, prefixes = prepare_inputs(
    countries=countries,
    df_Swap=df_Swap,
    df_Inflation_Swap=df_Inflation_Swap,
    maturities=MATURITIES,       # modifie la liste ici si tu ajoutes des points
    periods_per_year=252,
    window=252,
    vol_label="1Y",              # ergo '1Y_Vol_*'
    # country_prefix_map={"Italy":"IT","France":"FR"}  # (optionnel si tu veux forcer)
)
